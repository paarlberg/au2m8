#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon May 14 17:01:56 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set device [lindex $argv 0];
set IMO [lindex $argv 1]
set SUBNET [lindex $argv 2]


set timeout -1
spawn $env(SHELL)
match_max 100000
sleep 1
send -- "screen $device 9600\r"
sleep 1
send -- "\r"
sleep 1
send -- "admin\r"
sleep 1
send -- "J"
expect -exact "*"
send -- "a"
expect -exact "*"
send -- "n"
expect -exact "*"
send -- "p"
expect -exact "*"
send -- "e"
expect -exact "*"
send -- "t"
expect -exact "*"
send -- "0"
expect -exact "*"
send -- "8"
expect -exact "*"
send -- "0"
expect -exact "*"
send -- "5"
expect -exact "*"
send -- "\r"

sleep 2

send -- "J"
expect -exact "*"
send -- "a"
expect -exact "*"
send -- "n"
expect -exact "*"
send -- "p"
expect -exact "*"
send -- "e"
expect -exact "*"
send -- "t"
expect -exact "*"
send -- "0"
expect -exact "*"
send -- "8"
expect -exact "*"
send -- "0"
expect -exact "*"
send -- "5"
sleep 1
#expect -exact "*"
send -- "\r"

#System Name [Cisco_80:40:80] (31 characters max):
sleep 1
send -- "$IMO-ME1\r"

#Enter Country Code list (enter 'help' for a list of countries) [US]: 
sleep 1
send -- "DK\r"

#Configure a NTP server now? [YES][no]:
sleep 1
send -- "YES\r"

#Use default NTP servers [YES][no]:
sleep 1
send -- "NO\r"

#Enter the NTP server's IP address:
sleep 1
send -- "$SUBNET.250\r"

#Enter timezone location index (enter 'help' for a list of timezones):
sleep 1
send -- "14\r"

#Management Interface IP Address:
sleep 1
send -- "$SUBNET.169\r"

#Management Interface Netmask:
sleep 1
send -- "255.255.255.224\r"

#Management Interface Default Router:
sleep 1
send -- "$SUBNET.161\r"

#Cleaning up Provisioning SSID\r

#Create Management DHCP Scope? [yes][NO]:
sleep 1
send -- "NO\r"

#Create Employee Network? \[YES\]\[no\]:
sleep 1
send -- "YES\r"

#Employee Network Name (SSID)?:
sleep 1
send -- "ADMIN\r"

#Employee VLAN Identifier ?:
sleep 1
send -- "2\r"

#Employee Network Security? \[PSK\]\[enterprise\]:
sleep 1
send -- "PSK\r"

#Employee PSK Passphrase (8-38 charachters)?:
sleep 1
send -- "Passw0rd!!!\r"

#Re-enter Employee PSK Passphrase:
sleep 1
send -- "Passw0rd!!!\r"

#Create Employee DHCP Scope? [yes][NO]:
sleep 1
send -- "NO\r"

#Create Guest Network? \[yes\]\[NO\]:
sleep 1
send -- "YES\r"

#Guest Network Name (SSID)?:
sleep 1
send -- "CREW\r"

#Guest VLAN Identifier?:
sleep 1
send -- "1\r"

#Guest Network Security? \[WEB-CONSENT\]\[psk\]:
sleep 1
send -- "PSK\r"

#Guest PSK Passphrase (8-38 charachters)?:
sleep 1
send -- "Mv1NetCr3w\r"

#Re-enter Guest PSK Passphrase:
sleep 1
send -- "Mv1NetCr3w\r"

#Create Guest DHCP Scope? [yes][NO]: 
sleep 1
send -- "NO\r"

#Enable RF Parameter Optimization? [YES][no]:
sleep 1
send -- "YES\r"

#Client Density [TYPICAL][Low][High]:
sleep 1
send -- "TYPICAL\r"

#Traffic with Voice [NO][Yes]:
sleep 1
send -- "NO\r"

#Configuration correct? If yes, system will save it and reset. [yes][NO]:
sleep 1
send -- "YES\r"

#Cleaning up Provisioning SSID"
send -- "\\"
sleep 1
send -- "y"
sleep 1
expect eof
