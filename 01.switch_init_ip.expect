#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Jul 11 12:19:05 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
send -- "/usr/bin/screen -S switch -L /home/pi/screen-output.log /dev/ttyACM0 9600\r"

#sleep 5

#send -- "\r"

#sleep 5

#send -- "no\r"

#sleep 5

send -- "\r"

expect -exact "
Switch>"
send -- "en\r"
expect -exact "en\r
Switch#"
send -- "conf t\r"
expect -exact "conf t\r
Enter configuration commands, one per line.  End with CNTL/Z.\r
Switch(config)#"
send -- "interface vlan 1\r"
expect -exact "interface vlan 1\r
Switch(config-if)#"
send -- "ip address 10.20.30.50 255.255.255.0\r"
expect -exact "ip address 10.20.30.50 255.255.255.0\r
Switch(config-if)#"
send -- "no shut\r"
expect -exact "no shut\r
Switch(config-if)#"
send -- "end\r"
sleep 1
send -- "write\r"
sleep 2
send "exit\r"
sleep 1
send -- "\01d"
sleep 1
send -- "/usr/bin/screen -S switch -X quit\r"

send -- "exit\r"

expect eof
